if-then-else:

-> Funcio de 3 parametres, boolea i 2 expressions del mateix tipus.
-> Retorna el resultat d'una de les dues expressions.

prod n m =
	if n == 0 then 0
	else ( prod (n -1) m) + m
----------------------------

case:

prod n m =
	case n of
	0 -> 0
	n -> ( prod (n -1) m) + m
----------------------------

Guardes:

-> Afegeixen condicions al patro d'entrada.

prod n m
	| n == 0    = 0
	| otherwise = ( prod (n -1) m ) + m
----------------------------

Tipus basics: Bool, Char, Int, Integer, Float

-Bool:
True, False, &&, ||, not
Exemple: 
xOr :: Bool -> Bool -> Bool
xOr x y = ( x || y ) && not ( x && y )

-Char (entre cometes simples '')

-Int:
+ , - , * , ^ (infix)
div , mod , abs i negate (prefix)
-> Acotats per 2147483647.
-> Podem transformarlos a Float amb fromIntegral.
-> Funcions de conversio (import Data.Char):
	ord :: char -> Int
	chr :: Int -> char

-Integer:
-> Com Int, pero amb precissio arbitraria.
-> Podem transformarlos a Float amb fromIntegral.

-Float:
(a part de les operacions de Int)
^ :: Float ->Int -> Float
**:: Float ->Float -> Float
-> Conversio: ceiling, floor i round -> :: Float -> Int

-Double: per a tenir doble precisió.

-Rational: (racionals) fraccions d'Integers amb precisió arbitrària.
----------------------------

Tipus estructurats:

-Tupla:
(camp1, ... , campn)
-> Els camps son de tipus heterogenis.
Exemples: (3, True, 2.0) o ((5,2), 'p')
-> Les tuples de dos elements son "especials":
	-> Acces als seus elements amb fst i snd (primer element i segon element)

-Llistes:
-> Tots els elements han de ser del mateix tipus.
-> Llista buida []
-> Afegir element: (cap:cua)
-> Concatenacio: l1++l2
Exemple: (2:(3:[]))++(1:[]) es [2,3,1]
-> Acces: head, tail
----------------------------

Definicions locals:
-let:
let v1 = E1 ; ... ; vn = En in E
->És una expressió i té el tipus d'E.
Exemples:
prod n m =
	if n == 0 then 0
	else let x = div n 2 ; y = mod n 2
		in if y == 0 then 2* ( prod x m)
		   else ( prod (n -1) m) + m
prod n m =
	if n == 0 then 0
	else let x = div n 2
			 y = mod n 2
		in if y == 0 then 2* ( prod x m)
		   else ( prod (n -1) m) + m

-where:
-> El where permet definir constants o funcions locals.
-> No es una expressio!
-> Es possa al final per afegir les definicions que falten.
where {Def1; ... ; Defn}
Exemples:
prod n m =
	if n == 0 then 0
	else if y == 0 then 2* ( prod x m)
		 else ( prod (n -1) m) + m
	where { x = div n 2;
	 y = mod n 2}
prod n m =
	if n == 0 then 0
	else if y == 0 then 2 * (prod x m)
		 else (prod (n-1) m) + m
	where x = div n 2
		  y = mod n 2
-> Es poden definir també funcions (locals) noves que s'han usat.
-> Les variables locals a les guardes han de ser definides amb where.
----------------------------

Pattern matching:
> expr1 matches expr2 si existeix una substitucio per les variables de expr1
que la fan igual que expr2.
-> Proba si hi ha algun "matching", el primer que troba l'aplica.
Exemple:
sumar [] = 0
sumar (x:xs) = x+(sumar xs)
-> Al segon predicat fara pattern matching (x:xs) en treura x i xs
-> Per exemple, x:xs matches [ 2, 5, 8 ] , perque es 2:(5:(8:[])).
   Substitució: x = 2; xs = [ 5, 8 ]
-> Es semblant pero no igual a la unificacio (Prolog). La unificacio es "two-way"
   mentre pattern matching es "one-way".
   Exemple:
   X = Y
   X = 5
   -> Amb unificacio tindrem Y = 5, amb pattern matching donara error ja que Y no
   existeix en aquell moment, X en canvi no fallara (espera tenir pattern matching).
-> Es pot usar en el case i where, per exemple:
	sumar l = case l of
				[] -> 0
				(x:xs ) -> x +( sumar xs )
	divisio n m
		| n < m = (0 , n)
		| otherwise = (q +1 , r )
		where (q, r) = divisio (n-m) m
----------------------------

Polimorfisme parametric:
-> Utilitzar variables de tipus que poden pendre qualsevol valor.
-> Permet tenir definicions generiques.
Exemple:
map :: (a -> b) -> a -> b
-> a i b poden ser de qualsevol tipus.

-> Si no existeix substitucio possible per a les variables de tipus,
donara error de tipus.
Exemple: map not ['b', 'c'] donara error de tipus.
----------------------------

Ordre superior:

-> Les funcions en Haskell son d'ordre superior (prenen una funcio com argument, retornen una funcio com a resultat).
-> Les funcions en Haskell son objectes de primera classe.
----------------------------

Curryfication:

curry :: ((a,b) -> c) -> a -> b -> c
curry f x y = f ( x , y )
-> Haskell usa funcions currificades.

uncurry :: (a -> b -> c) -> (a,b) -> c
uncurry f ( p , s ) = f p s
-> En Haskell una funcio "uncurried" realment es una funcio amb un sol parametre, tipus tupla.
----------------------------
Flip:

flip :: (a -> b -> c) -> b -> a -> c
flip f y x = f x y
----------------------------

Composicio de funcions amb ".":
f . g = \x -> f (g x)
Exemple: dqsort = reverse . qsort

Aplicar funcions (permet evitar possar parentessis) amb "$":
f $ x = f x
Exemple: reverse $ 3:xs
----------------------------

Layziness:

-> Haskell fa servir lazy evaluation: nomes avalua el que cal.
-> Un valor encara no avaluat s'anomena "thunk".
-> Podem avaluar una funcio amb "thunks" com a arguments.
-> Permet tractar estructures molt grans o infinites.
----------------------------

Avaluacio eager (no lazy):

$!
-> Es pot forçar cert nivell d'avaluacio eager amb el prefix $!
   Exemple: f $! x permet avaluar primer x i despres f x
-> Nomes avalua fins que troba un constructor.
   Exemple: take 5 $! repeat 1 tornara [1,1,1,1,1], no seguira fins
            l'infinit, ja que avaluara la segona expressio nomes fins
            que troba un constructor (en aquest cas, ":").

$!!
-> Força l'avaluacio completa (no fins al primer constructor).
-> Pot ser perillos! (si tractem una llista infinita, no acabara mai).
   Exemple: en take 5 $!! repeat 1, no acabara mai d'avaluar l'expressio
            repeat 1.
----------------------------

Altres tipus predefinits:

-Maybe: per manejar errors.
-> Te dos constructors:
	-> Just: te un parametre.
	-> Nothing: no te parametres.
-> Operacions:
	-> isJust :: Maybe a -> Bool
	-> isNothing :: Maybe a -> Bool
	-> fromJust :: Maybe a -> a
	-> fromMaybe :: a -> Maybe a -> a
Exemple:
mitjana :: [a] -> Maybe a
mitjana [] = Nothing
mitjana l = Just (sum l `div` length l)
----------------------------

Creacio tipus de dades:
-data:
Exemple: data Color = Vermell | Blau | Verd | Groc

-newtype:
Exemple: 
newtype Dolars = Dolars Int
llistaDolars :: [Dolars]
llistaDolars = [Dolars 3, Dolars 27]
-> newtype es com data, pero amb un sol constructor de tipus.

-> tot newtype es pot escriure com un data (no al contrari).
Exemple: data Dolars = Dolars Int (sera equivalent al newtype d'abans).

-> El tipus Maybe esta definit amb un data:
data Maybe a = Just a | Nothing
-> El tipus Either tambe:
data Either a b = Left a | Right b
----------------------------

Creacio de tipus recursius:
(Exemple)
data ArbBin a = Node a (ArbBin a) (ArbBin a) | Abuit
data ArbBin a = Node a (ArbBin a) (ArbBin a) | Fulla a
data ArbBin a = Node a (ArbBin a) [ArbGen a] | Abuit
-> Els constructors Node, Abuit i Fulla son operadors.
----------------------------

Tipus sinonims:
type String = [Char]
type Person = (Name, Address)
type Name = String
type AssocList a b  = [(a,b)]
-> Son intercanviables.
----------------------------

Classes de tipus:
-> Les classes en Haskell no son tipus, si no categories de tipus.
-> Es un mecanisme similar a Interfaces Java.
	-> Permet tenir sobrecarrega.
	-> Es una altra forma de polimorfisme.

Exemple:
class Eq a where
	(==) :: a -> a -> Bool

elem :: (Eq a) => a -> [a] -> Bool

Exemple:
class Eq a where
	(==), (/=) :: a -> a -> Bool
	x /= y =  not (x == y)
	x == y =  not (x /= y)
-> El minim que cal per completar la definicio es definir el
== o definir el /= (nomes cal un dels dos).
-> Si diem que un tipus pertany a una classe, cal completar la 
definicio.

Exemple:
class (Eq a) => Ord a where
	compare              :: a -> a -> Ordering
	(<), (<=), (>=), (>) :: a -> a -> Bool
	max, min             :: a -> a -> a

	compare x y
		| x == y    = EQ
		| x <= y    = LT
		| otherwise = GT
	x <= y          = compare x y /= GT
	x <  y          = compare x y == LT
	x >= y          = compare x y /= LT
	x >  y          = compare x y == GT

data Ordering = LT | EQ | GT

-> El minim que cal completar es definir el (<=) o el compare.

-> Hi ha altres classes (Show, Read, Enum, Num)

Instanciacio:
Exemple:
data ArbBin a = Node a (ArbBin a) (ArbBin a) | Abuit

instance Eq a => Eq (ArbBin a) where
	Abuit == Abuit                   = True
	_     == Abuit                   = False
	Abuit == _                       = False
	(Node x a1 a2) == (Node y b1 b2) = x == y && a1 == b1 && a2 == b2

Instanciacio predefinida (deriving):
Exemple:
data Color = Vermell | Blau | Verd | Groc
	deriving (Read, Show, Enum, Eq, Ord)

Exemple (Num):
class (Eq a, Show a) => Num a where
	(+), (-), (*) :: a -> a -> a
	negate        :: a -> a
	abs, signum   :: a -> a
	fromInteger   :: Integer -> a

	x - y         = x + negate y
	negate x      = 0 - x
-> Obliga els tipus de classe Num a ser tambe de Eq i Show.
-> Per fer un instance cal definir tot menys negate o (-).

Exemple:
class Pred a where
	sat   :: a -> Bool
	unsat :: a -> Bool

	unsat = not . sat

instance Pred a => Pred (ArbBin a) where
	sat Abuit        = True
	sat (Node x b c) = (sat x) && (sat b) && (sat c)

instance (Pred Int) where
	sat 0 = True
	sat _ = False
----------------------------

Monades:
-> S'utilitzen en Haskell per modelar caracteristiques no gaire 
funcionals (indeterminisme, excepcions, nocio d'estat, entrada/sortida...)

-> Objectiu: encapsular un comput mitjançant un contenidor m.

-> Definirem monades com a instancies de la classe Monad o Functor.
-> No es poden derivar.

-> Les monades es regeixen per tres regles (que hem de comprovar):
	-> Identitat per l'esquerra: return a >>= f = f a
	-> Identitat per la dreta: m >>= return = m
	-> Associativitat: (m >>= f) >>= g = m >>= (\x -> f x >>= g)
----------------------------

Class Functor:

class Functor f where
	fmap :: (a -> b) -> f a -> f b

-> Els tipus llista ([]) i Maybe son instancies de la classe Functor.

instance Functor Maybe where
	fmap g Nothing  = Nothing
	fmap g (Just x) = Just (g x)

instance Functor [] where
	fmap = map

-> La funcio fmap associada al Functor
	-> Aplica la funcio a les dades d'un contenidor.
	-> Pot canviar el tipus del contingut, pero no el contenidor.
----------------------------

Class Monad:

class Monad m where
	(>>=)  :: m a    -> (a -> m b) -> m b
	(>>)   :: m a    -> m b        -> m b
	return :: a
	fail   :: String -> m a

-> Nomes utilitzarem les definicions (>>=), return i (>>).
	-> (>>=) representa la composicio de computs. Permet simular efectes
	laterals. Se l'anomena operador bind.
	L'unic que diferencia (>>=) del fmap es que retorna el contenidor amb
	el contingut nou, no nomes el contingut.
	-> (return x) representa un comput que produeix x mateix (x com a
	comput).
	-> (>>) r >> k = r >>= \_ -> k

-> Els tipus llista ([]) i Maybe son instancies de la classe Monad.

instance Monad Maybe where
	(Just x) >>= k = k x
	Nothing >>= k  = Nothing
	return         = Just

instance Monad [] where
	m >>= k  = concat (map k m)
	return x = [x]
----------------------------
Funcions:
-> Moltes funcions predefinides tenen una extensio per a Monad.
Exemple: mapM, foldM, filterM...

-> Tambe operacions per extendre funcions i que treballin amb Monad.

import Control.Monad

liftM :: Monad m => (a -> b) -> m a -> m b
liftM2 :: Monad m => (a -> b -> c) -> m a -> m b -> m c
(liftM3, liftM4, etc)
Exemple: 
sumaMaybe :: Num a => Maybe a -> Maybe a -> Maybe a
sumaMaybe = liftM2 (+)
---------------------------

Composicio de computs:

-> (;) per concatenar computs.
-> operador <- per guardar resultats intermedis.
do { e1 ; e2 } = e1 >> e2
do { p <- e1 ; e2} = e1 >>= \p -> e2
-> Si usem identacio correcta i diferents linies, podem estalviar-nos el ;
do p <- e1
   e2
----------------------------

Monad IO:

-> Usem el tipus IO per gestionar entrada/sortida.
-> IO es una instancia de les classes Functor i Monad
-> Normalment s'ussa amb notacio do.

Operacions basiques:
getChar  :: IO Char
putChar  :: Char -> IO ()
getLine  :: IO String
putStr   :: String -> IO ()
putStrLn :: String -> IO ()

-> En Haskell () es el tipus "unit" i representa res (void en altres
llenguatges).

Exemple (implementacio de getLine):
getLine = do c <- getChar
             if c == '\n'
             then return ""
             else do l <- getLine
                     return (c:l)

-> El where pot donar problemes degut a la definicio de (>>=).
-> Podem usar el let.
Exemple:
main = do
       x <- getLine
       let f = factorial (read x)::Integer
       print f

Exemple (Sense usar el let):
main do
     x <- getLine
     f <- return (factorial ((read x)::Integer))
     print f
----------------------------
Monad IO amb arxius o canals:

type FilePath = String
data IOMode = ReadMode | WriteMode | AppendMode | ReadWriteMode

openFile :: FilePath -> IOMode -> IO Handle
hClose :: Handle -> IO ()
getContents :: Handle -> IO String

-> Handle es el tipus de Haskell per arxius i canals.
-> S'ha d'importar System.IO per usar-les.
Exemple:
import System.IO
mgetLine :: IO String
mgetLine = do c <- hGetChar stdin
              if c == '\n'
              then return ""
              else do l <- mgetLine
                      return (c:l)
-> On stdin es el canal d'entrada estandard.
Exemple:
import System.IO
mgetLine :: Handle -> IO String
mgetLine ha = do c <- hGetChar ha
              if c == '\n'
              then return ""
              else do l <- mgetLine ha
                      return (c:l)

main = do name <- getLine
          ha <- openFile name ReadMode
          s <- mgetLine ha
          putStrLn s
          hClose ha
----------------------------

Nombres aleatoris:

-> Llibreria System.Random

-> Generar nombre aleatori:
	-> Generar la seed inicial.
	-> Generar una seqüencia a partir de la seed (modificant el seed 
	despres de generar cada nombre).

-> Podem fer servir nombres aleatoris sense monades generant la llavor
i passant-la explicitament a totes les funcions que l'usin.
-> Fent servir IO. La gestio de la llavor sera transparent.
----------------------------

class RandomGen g where
	next :: g -> (Int, g)
-- A partir d'un generador dona un Int aleatori dins el rang del generador.
-- Retorna el següent generador.
	split :: g -> (g, g)
-- D'un generador n'obte dos.
	genRange :: g -> (Int, Int)
-- Indica el rang de valors associats al generador.

-> StdGen instancia dins la classe RandomGen
data StdGen
	deriving (Read, Show, RandomGen)

mkStdGen :: Int -> StdGen
-- Obte un generador a partir d'un enter.

getStdRandom :: (StdGen -> (a, StdGen)) -> IO a
-- Donada una funcio generadora de nombres aleatoris retorna un nou
-- nombre aleatori dins la monada i mante el generador de la monada.

getStdGen :: IO StdGen
-- Obte un generador.






----------------------------
FUNCIONS
----------------------------

Funcions ordre superior predefinides amb llistes:

map :: (a->b) -> [a] -> [b]
-- aplica la funció a tots el elements de la llista

--map (*2) [2,4,6,7]
--[4,8,12,14]

--map (even) [2,4,6,7]
--[True,True,True,False]

foldr :: (a -> b -> b) -> b -> [a] -> b
--rec 
--foldr f x [x1,....,xn] = -- (f x1 (f x2 ( .....(f xn (foldr f x []) )...))) 
--foldr f x [] = x
--foldr (+) 0 [3,2,(-1)]
--4

foldl::(b -> a -> b) -> b -> [a] -> b
--iter // tail recursive definition
--foldl f x [x1,....,xn] = foldl f (f ( ... (f x x1) ... ) xn) []
--foldl f x [] = x
--foldl (+) 0 [3,2,(-1)]
--4

scanr :: (a -> b -> b) -> b -> [a] -> [b]
-- retorna la llista amb tots els valors intermedis calculats pel foldr
--scanr (+) 0 [3,2,(-1)]
--[4,1,-1,0]
--Noteu que el foldr calcula amb el resultat crida recursiva.

scanl::(b -> a -> b) -> b -> [a] -> [b]
-- retorna retorna la llista amb tots els valors intermedis calculats pel foldrl
--scanl (+) 0 [3,2,(-1)]
--[0,3,5,4]
--Noteu que el foldl acumula el càlcul en el pas de paràmetres a la crida recursiva.

iterate :: (a -> a) -> a -> [a]
-- iterate f x = ----[x, (f x), (f (f x)), (f (f (f x))), ....

all::(a -> Bool) -> [a] -> Bool
-- tots els elements de la llista satisfan la propietat.

any::(a -> Bool) -> [a] -> Bool
-- algun element de la llista satisfà la propietat.

filter::(a -> Bool) -> [a] -> [a]
-- selecciona els que satisfan la propietat

dropWhile::(a -> Bool) -> [a] -> [a]
-- elimina mentre es satisfà la propietat.
--dropWhile  (even) [2,4,6,7]
--[7]

takeWhile::(a -> Bool) -> [a] -> [a]
-- es queda els elements mentre es satisfà la propietat.
--takeWhile  (even) [2,4,6,7]
--[2,4,6]

zipWith::(a -> b -> c) -> [a] -> [b] -> [c]
-- Aplica la funció als elements dos a dos de les llistes donades i
-- retorna la llista de resultats.

span :: (a -> Bool) -> [a] -> ([a], [a])
-- Applied to a predicate p and a list xs, returns a tuple where first
-- element is longest prefix (possibly empty) of xs of elements that 
-- satisfy p and second element is the remainder of the list.
--span (< 3) [1,2,3,4,1,2,3,4] == ([1,2],[3,4,1,2,3,4])
--span (< 9) [1,2,3] == ([1,2,3],[])
--span (< 0) [1,2,3] == ([],[1,2,3])
-- span p xs is equivalent to (takeWhile p xs, dropWhile p xs)

concatMap :: Foldable t => (a -> [b]) -> t a -> [b]
-- Creates a list from a list generating function by application of this
-- function on all elements in a list passed as the second argument.
--concatMap (show) [[1,2,3,4],[2],[]]
--"[1,2,3,4][2][]"
--concatMap (\x -> [(x,x+2,x/2)]) [1,3,5]
--[(1.0,3.0,0.5),(3.0,5.0,1.5),(5.0,7.0,2.5)]
----------------------------

Altres funcions:

concat :: Foldable t => t [a] -> [a]
-- The concatenation of all the elements of a container of lists.
--concat [[1,2,3,4],[2]]
--[1,2,3,4,2]

head :: [a] -> a
-- Returns the first item of a list.

tail :: [a] -> a
-- Returns the last item of a list.

init :: [a] -> [a]
-- Returns the list without its last item.

last :: [a] -> [a]
-- Returns the list without its first item.

reverse :: [a] -> [a]
-- Returns the reverse of the list.

length :: Foldable t => t a -> Int
-- Returns the length of a list.

(!!) :: [a] -> Int -> a
-- Returns the item at the position indicated by the second argument.
--[2,3,4] !! 1
--3
--[2,3,4] !! 3
--*** Exception: Prelude.!!: index too large

elem :: (Eq a, Foldable t) => a -> t a -> Bool
-- Returns True if the list contains an item equal to the first argument.

notElem :: (Eq a, Foldable t) => a -> t a -> Bool
-- Returns True if the list does not contain an item equal to the first argument.

maximum :: (Ord a, Foldable t) => t a -> a
-- Returns the maximum element of the list.

minimum :: (Ord a, Foldable t) => t a -> a
-- Returns the minimum element of the list.

and :: Foldable t => t Bool -> Bool
-- Returns the and of the elements of the list.

or :: Foldable t => t Bool -> Bool
-- Returns the or of the elements of the list.

sum :: (Num a, Foldable t) => t a -> a
-- Returns the sum of the elements of the list.

product :: (Num a, Foldable t) => t a -> a
-- Returns the product of the elements of the list.

take :: Int -> [a] -> [a]
-- Returns the first X elements of the list (where X is the first argument).

drop :: Int -> [a] -> [a]
-- Returns the list withput its first X elements
-- (where X is the first argument).

splitAt :: Int -> [a] -> ([a], [a])
-- Is equivalent to (take n xs, drop n xs)